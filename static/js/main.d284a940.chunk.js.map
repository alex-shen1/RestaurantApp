{"version":3,"sources":["TopPanel.js","List.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["TEST","console","log","process","TopPanel","props","getData","link","fetch","then","response","json","data","catch","error","require","state","Form","Group","controlID","Label","Control","type","placeholder","Button","onClick","this","Component","List","Map","App","setData","new_data","setState","test","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uSAKMA,EAAO,0CACD,cAAUA,EAAV,4DACZC,QAAQC,IAAIC,wM,IACSC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAKVC,QAAU,WACNL,QAAQC,IAAI,eACZ,IAAMK,EAAI,2EAAuEP,EAAvE,0DAEVQ,MAAMD,GACDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAASX,QAAQC,IAAIU,MAC1BC,OAAM,SAACC,GAAD,OAAWb,QAAQC,IAAIY,MAEpBC,EAAQ,KAbtB,EAAKC,MAAQ,GAFE,E,qDA+Ef,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAClB,kBAACF,EAAA,EAAKG,MAAN,8BACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,WAAWC,YAAY,8BAGlD,kBAACC,EAAA,EAAD,CAAQC,QAASC,KAAKpB,SAAtB,e,GAxFsBqB,aCNjBC,E,uKAEb,OAAO,yC,GAFmBD,aCAbE,E,uKAEb,OAAO,wC,GAFkBF,aCUZG,G,wDACnB,WAAYzB,GAAO,IAAD,8BAChB,cAAMA,IAMR0B,QAAU,SAACC,GACT,EAAKC,SAAS,CAACrB,KAAMoB,KARL,EAWlBE,KAAO,WACLjC,QAAQC,IAAI,SAVZ,EAAKc,MAAQ,CACXJ,KAAM,IAHQ,E,qDAiBhB,OACE,yBAAKuB,UAAU,OACb,kBAAC,EAAD,CAAUJ,QAASL,KAAKK,UACxB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4BAAQN,QAASC,KAAKQ,MAAtB,a,GAvByBP,cCAbS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdrC,OAAM,SAAAC,GACLb,QAAQa,MAAMA,EAAMqC,c","file":"static/js/main.d284a940.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY;\r\nconst TEST = \"AIzaSyBQRbOl8Z5HnrY12zURP84C6Tdwsoy-HUI\";\r\nconst fields = `key=${TEST}&radius=100000&location=38.0293,-78.4767&type=restaurant`\r\nconsole.log(process.env)\r\nexport default class TopPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    getData = () => {\r\n        console.log(\"doing stuff\");\r\n        const link = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=${TEST}&radius=1000&location=38.0293,-78.4767&type=restaurant`;\r\n\r\n        fetch(link)\r\n            .then(response => response.json())\r\n            .then(data => {console.log(data)})\r\n            .catch((error) => console.log(error));\r\n\r\n        const axios = require(\"axios\");\r\n\r\n        // axios.get('https://maps.google.apis.com/maps/api/place/nearbysearch/json?key=AIzaSyCtsU4hkzYAIbx3woGLJ-zekJUWxh9T3Oc&radius=100000&location=38.0293,-78.4767&type=restaurant')\r\n        //     .then(function (response) {\r\n        //         console.log(\"response received\")\r\n        //         console.log(response);\r\n        //     })\r\n        //     .catch(error => {\r\n        //         console.error(error)\r\n        //         console.log(error)\r\n        //     });\r\n\r\n        // axios.get('https://cors-anywhere.herokuapp.com-maps.googleapis.com/maps/api/place/nearbysearch/json', \r\n        //     {\r\n        //         key: GOOGLE_API_KEY,\r\n        //         radius: 100000,\r\n        //         location: \"38.0293,78.4767\"\r\n        //     }\r\n        // ).then(function (response) {\r\n        //     console.log(\"response received\")\r\n        //     console.log(response);\r\n        // })\r\n        //     .catch(function (error) {\r\n        //         console.log(error);\r\n        //     })\r\n        // axios({\r\n        //     \"method\":\"GET\",\r\n        //     \"url\":\"https://transloc-api-1-2.p.rapidapi.com/stops.json\",\r\n        //     \"headers\":{\r\n        //     \"content-type\":\"application/octet-stream\",\r\n        //     \"x-rapidapi-host\":\"transloc-api-1-2.p.rapidapi.com\",\r\n        //     \"x-rapidapi-key\":\"c96a129019msh032ff6b90f063edp12836cjsn86ac9b68c0ab\",\r\n        //     \"useQueryString\":true\r\n        //     },\"params\":{\r\n        //     \"callback\":\"call\",\r\n        //     \"geo_area\":\"35.80176%2C-78.64347%7C35.78061%2C-78.68218\",\r\n        //     \"agencies\":\"12%2C16\"\r\n        //     }\r\n        //     })\r\n        //     .then((response)=>{\r\n        //       console.log(response)\r\n        //     })\r\n        //     .catch((error)=>{\r\n        //       console.log(error)\r\n        //     })\r\n\r\n        // axios({\r\n        //     \"method\": \"GET\",\r\n        //     \"url\": 'http://maps.googleapis.com/maps/api/place/nearbysearch/json',\r\n        //     \"params\": {\r\n        //         \"key\": TEST,\r\n        //         \"location\": '38.0293,-78.4767',\r\n        //         \"radius\": 100000\r\n        //     }\r\n        // })\r\n        //     .then((response) => {\r\n        //         console.log(response)\r\n        //     })\r\n        //     .catch((error) => {\r\n        //         console.log(error)\r\n        //     })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <Form.Group controlID=\"SearchBar\">\r\n                        <Form.Label>Restaurant Search Bar</Form.Label>\r\n                        <Form.Control type=\"textarea\" placeholder=\"Search for a restaurant\" />\r\n                    </Form.Group>\r\n                </Form>\r\n                <Button onClick={this.getData}>Search</Button>\r\n            </div >\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class List extends Component{\r\n    render(){\r\n        return <div>\r\n            List\r\n        </div>\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class Map extends Component{\r\n    render(){\r\n        return <div>\r\n            Map\r\n        </div>\r\n    }\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport TopPanel from './TopPanel';\nimport List from \"./List\";\nimport Map from \"./Map\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\n\nconst GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data: {},\n    }\n  }\n\n  setData = (new_data) => {\n    this.setState({data: new_data})\n  } \n\n  test = () => {\n    console.log(\"test\")\n    // require('dotenv').load();\n    \n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <TopPanel setData={this.setData}/>\n        <List />\n        <Map />\n        <button onClick={this.test}>TEST</button>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}